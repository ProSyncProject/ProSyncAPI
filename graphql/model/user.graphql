type User {
    id: Int! @hide(env: ["production", "local"])
    unique_id: String!
    first_name: String!
    middle_name: String
    last_name: String!
    full_name: String!
    username: String!
    email: String!
    github_id: String
    github_username: String
    email_verified_at: String
    password: String! @hide(env: ["production", "local"])
    rememberToken: String
    deleted_at: String
    created_at: String!
    updated_at: String!

    projects: [Project!]! @belongsToMany
    issues: [Issue!]! @hasMany(relation: "assignee_id")
    createdIssues: [Issue!]! @hasMany(relation: "reporter_id")
}

extend type Query {
    me: User @auth
    allUsers(project: String): [User!]! @field(resolver: "App\\GraphQL\\Queries\\FilterUsers")
    otherUsers: [User!]! @field(resolver: "App\\GraphQL\\Queries\\OtherUsersOnly")
    paginatedUsers(page: Int! @eq): [User!]! @paginate
    getUserByUniqueId(unique_id: String! @like): User @find
    getUserByEmail(email: String! @like): User @find
    getUserByUsername(username: String! @like): User @find
}

input GithubAuthorizationInput {
    firebase_id: String!
    github_id: String!
    github_token: String
    github_refresh_token: String
    github_username: String!
}

extend type Mutation {
    createUser(
        first_name: String!
        middle_name: String
        last_name: String!
        username: String!
        email: String!
        password: String!
    ): User @create

    updateUser(
        unique_id: String!
        first_name: String
        middle_name: String
        last_name: String
        username: String
        email: String
    ): User @field(resolver: "App\\GraphQL\\Mutations\\UpdateUser")

    deleteUser(unique_id: String!): Boolean @delete(model: "User")
    markAllNotificationsAsRead: User @field(resolver: "App\\GraphQL\\Mutations\\MarkAllNotificationsAsRead")
    authorizeGithub(inputs: GithubAuthorizationInput): User @field(resolver: "App\\GraphQL\\Mutations\\AuthorizeGithub")
}
