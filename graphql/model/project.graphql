type Project {
    id: Int! @hide(env: ["production", "local"])
    unique_id: String!
    name: String!
    description: String
    prefix: String
    start_date: String
    end_date: String
    status: Status!
    parent_id: Int
    privacy: Privacy!
    deleted_at: String
    created_at: String!
    updated_at: String!

    users: [User!]! @belongsToMany
    priorities: [Priority!]! @hasMany
    children: [Project!]! @hasMany
    parent: Project @belongsTo
    epics: [Epic!]! @hasMany
    comments: [Comment!]! @morphMany(relation: "commentable")
    identifiers: [Identifier!]! @hasMany(relation: "identifiers")
    issues: [Issue!]! @hasMany
    subIssues: [SubIssue!]! @hasManyThrough
}

extend type Query @guard {
    allProjects: [Project!]! @all @canModel(model: "Project", ability: "viewAny")
    paginatedProjects(page: Int! @eq): [Project!]! @paginate @canModel(model: "Project", ability: "viewAny")
    getProjectByUniqueId(unique_id: String! @like): Project @find @canModel(model: "Project", ability: "view")
    getProjectByName(name: String! @like): Project @find @canModel(model: "Project", ability: "view")
    getProjectByPrefix(prefix: String! @like): Project @find @canModel(model: "Project", ability: "view")
}

extend type Mutation @guard {
    createProject(
        name: String @rules(apply: ["required", "max:255"])
        description: String @rules(apply: ["required"])
        prefix: String @rules(apply: ["required", "max:5"])
        start_date: String @rules(apply: ["required", "date:Y-m-d"])
        end_date: String @rules(apply: ["required", "date:Y-m-d"])
    ): Project @create @guard @canModel(ability: "create", model: "Project")

    updateProject(
        unique_id: String!
        name: String
        description: String
        prefix: String
        owner_id: Int
        start_date: String
        end_date: String
        status: Status
        parent_id: Int
        privacy: Privacy
    ): Project @update

    deleteProject(unique_id: String!): Boolean @delete(model: "Project") @canModel(model: "Project", ability: "delete")
}
